@page "/realizarCompra"
@rendermode InteractiveServer
@inject VentasServices servicesVentas
@inject ProductosServices servicesProductos
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<!-- Agregar en el <head> -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.js"></script>


<div style="color: #333333">
    <div style="position: absolute; top: 20px; right: 20px;">
        <NavLink class="btn btn-primary" href="/">Menu</NavLink>
    </div>
    <h1 class="text-center display-1">Realizar Compra</h1>

    <div class="mb-3">
        <label for="nombreVenta" class="form-label">Nombre de la Venta</label>
        <input type="text" class="form-control" id="nombreVenta" @bind="ComentarioVenta" />
    </div>

    @* <div class="mb-3">
        <label for="idUsuario" class="form-label">ID Usuario</label>
        <input type="text" class="form-control" id="idUsuario" value="@IdUsuario" readonly />
    </div> *@

    <div class="mb-3">
        <label for="productos" class="form-label">Selecciona Productos</label>
        <select @bind="@SelectedProductoId" class="form-select">
            <option value="">Seleccione un producto</option>
            @foreach (var producto in Productos)
            {
                <option value="@producto.Id">@producto.descripcion</option>
            }
        </select>
        <label for="stock" class="form-label">Cantidad</label>
        <input type="number" class="form-control" id="stock" @bind="Cantidad" min="1" />
        <button type="button" class="btn btn-primary" @onclick="AgregarProducto">Agregar Producto</button>
    </div>


    <h3>Productos en la Venta</h3>
    <table class="table">
        <thead>
            <tr>
                <th>Detalles</th>
                <th>Acciones</th>
            </tr>
        </thead>
   
        <tbody>
            @{
                double totalGeneral = 0; // Inicializa el total como double
            }

            @foreach (var item in ProductosVendidos)
            {
                var producto = Productos.First(p => p.Id == item.IdProducto);
                var nombreProducto = producto.descripcion;
                double valorPorUnidad = producto.precioVenta; // Asegúrate de que sea double
                double totalPorProducto = valorPorUnidad * item.stock; // Cálculo como double

                totalGeneral += totalPorProducto; // Suma al total general

                <tr>
                    <td>
                        @nombreProducto -
                        <input type="number" @bind="@item.stock" style="width: 60px; margin-left: 5px;" min="0" />
                        unidades - Precio por unidad: $@valorPorUnidad - Total: $@totalPorProducto
                    </td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => EliminarProducto(item.IdProducto, totalPorProducto)">Eliminar</button>
                      @*   <button class="btn btn-warning" @onclick="() => ActualizarStock(item.IdProducto)">Actualizar Stock</button> *@
                    </td>
                </tr>
            }
        </tbody>
    </table>


    <h4>Total Gastado: $@totalGeneral </h4> <!-- Muestra el total acumulado -->

    <button class="btn btn-success" @onclick="CrearVenta">Crear Venta</button>
</div>

@code {
    public string ComentarioVenta { get; set; }
    public int? IdUsuario { get; set; }
    public int SelectedProductoId { get; set; }
    public int Cantidad { get; set; }
    public List<ProductoVendido> ProductosVendidos { get; set; } = new List<ProductoVendido>();
    public List<Producto> Productos { get; set; } = new List<Producto>();
    public double totalGeneral { get; set; } = 0; // Inicializa como decimal

    protected override async Task OnInitializedAsync()
    {
        // Cargar productos
        Productos = await servicesProductos.GetProductosSer();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Recuperar el ID del usuario logueado
            IdUsuario = await RecuperarIDSesion();
            StateHasChanged(); // Forzar el re-renderizado para mostrar el ID de usuario
        }
    }

    public void AgregarProducto()
    {
        if (SelectedProductoId != 0 && Cantidad > 0)
        {
            var productoSeleccionado = Productos.FirstOrDefault(p => p.Id == SelectedProductoId);
            if (productoSeleccionado != null)
            {
                // Verificar si la cantidad solicitada no excede el stock disponible
                if (Cantidad > productoSeleccionado.stock)
                {
                    _ = JSRuntime.InvokeVoidAsync("alert", "La cantidad solicitada excede el stock disponible.");
                    return;
                }

                ProductosVendidos.Add(new ProductoVendido
                    {
                        IdProducto = productoSeleccionado.Id,
                        stock = Cantidad,
                        IdVenta = 0 // Este se asignará en el servidor
                    });

                // Limpiar campos
                SelectedProductoId = 0;
                Cantidad = 0;
            }
        }
    }

    public async Task CrearVenta()
    {
        if (string.IsNullOrWhiteSpace(ComentarioVenta) || IdUsuario == null || !ProductosVendidos.Any())
        {
            _ = JSRuntime.InvokeVoidAsync("alert", "Por favor, completa todos los campos.");
            return;
        }

        var venta = new Venta
            {
                comentario = ComentarioVenta,
                IdUsuario = IdUsuario.Value, // Convertir a int ya que IdUsuario es Nullable
                lsProductosVendidos = ProductosVendidos
            };

        try
        {
            var nuevaVenta = await servicesVentas.CrearVentaAsync(venta);
            Console.WriteLine($"Venta creada con ID: {nuevaVenta.Id}");
            //NavigationManager.NavigateTo("/ventas"); // Redirigir a la lista de ventas
            
            // Limpiar la compra
            ComentarioVenta = string.Empty; // Reinicia el comentario
            ProductosVendidos.Clear(); // Limpia la lista de productos vendidos
            Cantidad = 0; // Reinicia la cantidad si es necesario
            SelectedProductoId = 0; // Reinicia la selección del producto si es necesario

            // Usar SweetAlert en lugar de alert
            _ = JSRuntime.InvokeVoidAsync("swal", "Éxito", "VENTA REALIZADA CON ÉXITO. GRACIAS POR SU COMPRA", "success");

        }
        catch (Exception ex)
        {
            // Manejo de error (opcional)
            Console.WriteLine($"Error al crear la venta: {ex.Message}");
            _ = JSRuntime.InvokeVoidAsync("swal", "Error", "Hubo un problema al realizar la venta. Inténtalo de nuevo.", "error");

        }
    }

    private void EliminarProducto(int idProducto, double totalPorProducto)
    {
        var itemAEliminar = ProductosVendidos.FirstOrDefault(item => item.IdProducto == idProducto);
        if (itemAEliminar != null)
        {
            ProductosVendidos.Remove(itemAEliminar);
            totalGeneral -= totalPorProducto; // Resta del total general
            StateHasChanged(); // Asegúrate de que la UI se actualice
        }
    }

   

    public async Task<int?> RecuperarIDSesion()
    {
        // Recupera el valor del userId del sessionStorage
        var userIdString = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "userId");

        // Intenta convertir el string a int
        if (int.TryParse(userIdString, out int userId))
        {
            return userId; // Retorna el ID del usuario
        }

        return null; // Retorna null si no se pudo parsear
    }
}

