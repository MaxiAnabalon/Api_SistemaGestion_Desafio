@page "/AgregarUsuario/{id:int?}"
@rendermode InteractiveServer
@inject UsuariosServices servicesUsuarios
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime



<h2>Agregar Nuevo Usuario</h2> 
<div style="position: absolute; top: 20px; right: 20px;">
    <NavLink class="btn btn-primary" href="/">Menu</NavLink>
</div>
<EditForm Model="nuevoUsuario" OnValidSubmit="GuardarUsuario" FormName="AgregarUsuarioForm">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label>Nombre</label>
        <InputText @bind-Value="nuevoUsuario.nombre" class="form-control" required />
        <ValidationMessage For="@(() => nuevoUsuario.nombre)" />
    </div>
    <div class="form-group">
        <label>Apellido</label>
        <InputText @bind-Value="nuevoUsuario.apellido" class="form-control" required />
        <ValidationMessage For="@(() => nuevoUsuario.apellido)" />
    </div>
    <div class="form-group">
        <label>Nombre Usuario</label>
        <InputText @bind-Value="nuevoUsuario.nombreDeUsuario" class="form-control" required />
        <ValidationMessage For="@(() => nuevoUsuario.nombreDeUsuario)" />
    </div>
    <div class="form-group">
        <label>Contraseña</label>
        <InputText @bind-Value="nuevoUsuario.contraseña" class="form-control" type="password" required />
        <ValidationMessage For="@(() => nuevoUsuario.contraseña)" />
    </div>
    <div class="form-group">
        <label>Email</label>
        <InputText @bind-Value="nuevoUsuario.email" class="form-control" required />
        <ValidationMessage For="@(() => nuevoUsuario.email)" />
    </div>
    <button type="submit" class="btn btn-success">Guardar</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
</EditForm>
 
@code {
    [Parameter]
    public int? id { get; set; }

    public Usuario nuevoUsuario = new Usuario();

    private async Task GuardarUsuario()
    {
        //await servicesUsuarios.InsertUsuarioSer(nuevoUsuario);
        //NavigationManager.NavigateTo("/Usuarios");
        // Validar si el nuevo usuario es válido
        if (nuevoUsuario == null)
        {
            await MostrarMensaje("El usuario no es válido.");
            return;
        }

        // Intentar guardar el nuevo usuario
        var (usuarioCreado, mensaje) = await servicesUsuarios.InsertUsuarioSer(nuevoUsuario);

        // Mostrar el mensaje devuelto por el método
        await MostrarMensaje(mensaje);

        if (usuarioCreado != null)
        {
            if (id == 0)
            {
                NavigationManager.NavigateTo("/Usuarios");
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }
        
    }

    // Método para mostrar el mensaje
    private async Task MostrarMensaje(string mensaje)
    {
         // Aquí puedes usar un simple alert de JavaScript
         await JSRuntime.InvokeVoidAsync("alert", mensaje);
     
    }

    private void Cancelar()
    {
        if (id == 0)
        {
            NavigationManager.NavigateTo("/Usuarios");
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }
}

