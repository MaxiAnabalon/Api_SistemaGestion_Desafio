@page "/Usuarios"
@inject UsuariosServices servicesUsuarios;
@inject NavigationManager NavigationManager;
@rendermode InteractiveServer

<div style="color: #333333">
    <div style="position: absolute; top: 20px; right: 20px;">
        <NavLink class="btn btn-primary" href="/">Menu</NavLink>
    </div>
    <h1 class="text-center display-1">Usuarios</h1>

    <div class="mb-3 d-flex justify-content-between">
        <NavLink class="btn btn-primary me-2" href="/AgregarUsuario/0">Agregar Usuario</NavLink>
        <input type="text" class="form-control" placeholder="Buscar usuario" @bind="searchTerm" @oninput="OnInputChanged" style="width: 300px;" />
    </div>

    <table class="table table-striped table-bordered" style="color: #333333">
        <thead class="thead-dark">
            <tr>
                <th>ID</th>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>Nombre Usuario</th>
                <th>Contraseña</th>
                <th>Email</th>
                <th colspan="2" style="text-align: center;">Acciones</th>
            </tr>
        </thead>
        <tbody>
            @if (filteredUsuarios != null && filteredUsuarios.Any())
            {
                foreach (var usuario in filteredUsuarios)
                {
                    <tr>
                        <td>@usuario.Id</td>
                        <td>@usuario.nombre</td>
                        <td>@usuario.apellido</td>
                        <td>@usuario.nombreDeUsuario</td>
                        <td>
                            <input type="password" value="@usuario.contraseña" readonly style="color: inherit; background-color: inherit; padding: inherit; border-radius: inherit;" />
                        </td>
                        <td>@usuario.email</td>
                        <td>
                            <button type="button" class="btn btn-danger" @onclick="@(() => EliminarUsuario(usuario.Id))">Eliminar</button>
                        </td>
                        <td>
                            <button type="button" class="btn btn-secondary" @onclick="@(() => ModificarUsuario(usuario.Id))">Modificar</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    public List<Usuario> oUsuarios = new List<Usuario>();
    public List<Usuario> filteredUsuarios = new List<Usuario>();
    public string searchTerm = "";
    private CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();

    protected override async Task OnInitializedAsync()
    {
        oUsuarios = await servicesUsuarios.GetUsuariosSer();
        filteredUsuarios = oUsuarios; // Inicializa la lista filtrada con todos los usuarios
    }

    public async Task OnInputChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        cancellationTokenSource.Cancel(); // Cancela la búsqueda anterior
        cancellationTokenSource = new CancellationTokenSource();

        try
        {
            await Task.Delay(300, cancellationTokenSource.Token); // Espera 300 ms
            BuscarUsuarios();
        }
        catch (TaskCanceledException) { }
    }

    public void BuscarUsuarios()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredUsuarios = oUsuarios; // Muestra todos si no hay término
        }
        else
        {
            // filteredUsuarios = oUsuarios
            //     .Where(u => u.nombre.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            //                  u.apellido.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            //                  u.nombreDeUsuario.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            //     .ToList(); // Filtra según el término de búsqueda
            filteredUsuarios = oUsuarios
                .Where(u => u.nombre.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                              u.apellido.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList(); // Filtra solo por el nombre
        }

        StateHasChanged(); // Actualiza la vista
    }

    public async Task EliminarUsuario(int id)
    {
        await servicesUsuarios.DeleteUsuarioSer(id);
        oUsuarios = await servicesUsuarios.GetUsuariosSer(); // Actualiza la lista después de eliminar
        filteredUsuarios = oUsuarios; // Restablece la lista filtrada
    }

    public void ModificarUsuario(int id)
    {
        NavigationManager.NavigateTo($"/ModificarUsuario/{id}");
    }
}
